"""Subclass of Main_ui, which is generated by wxFormBuilder."""

import wx
import ui
import time
from importlib import import_module
def get_current_time():
    # 获取当前时间
    return time.strftime('%Y-%m-%d %H:%M:%S ',time.localtime(time.time()))

class Img_devphelp_windows( ui.help_windows ):
    # 帮助文件
	def __init__( self, parent ):
		ui.help_windows.__init__( self, parent )
	
	def out(self):
		# 关闭按钮
		self.Close()
  
class Img_classificationMain_ui( ui.Main_ui ):
    def __init__( self, parent ):
        ui.Main_ui.__init__( self, parent )
        self.SetWindowStyleFlag(wx.DEFAULT_FRAME_STYLE & ~(wx.RESIZE_BORDER | wx.MAXIMIZE_BOX))# 禁止修改窗体大小
        self.file_picker.GetPickerCtrl().SetLabel("浏览文件")
        # 添加子线程s
        self.log_mess("请等待tensorflow模块加载，会卡顿一会，一会就好")
        wx.CallLater(0,self.import_tensorflow)  
        
        
    def on_file_pick( self, event ):
        # 图片浏览按钮
        filepath = self.file_picker.GetPath()
        if filepath:
            image = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
            display_width, display_height = self.image_show.GetSize() #获取Image_show的显示面积
            image_width, image_height = image.GetWidth(), image.GetHeight() # 计算缩放后的图像大小，保持纵横比例
            if image_width > display_width or image_height > display_height:
                scale_factor = min(display_width / image_width, display_height / image_height)
                image = image.Scale(int(image_width * scale_factor), int(image_height * scale_factor), wx.IMAGE_QUALITY_HIGH)
            bitmap = wx.Bitmap(image)
            self.image_show.SetBitmap(bitmap)
            self.log_mess(f"添加图片：{filepath}")
            # 对图片进行识别
            pass
    def show_help( self, event ):
		# 显示帮助
        dialog = Img_devphelp_windows(None)
        dialog.ShowModal()
        dialog.Destroy()
        
    def log_mess(self,message):
        # 向日志台输出日志
        self.log_text.AppendText(get_current_time()+message+"\n")
        
    def import_tensorflow(self):
        # 导入model模块
        global model
        try:
            model=import_module("model")
            self.log_mess("tensorflow加载添加完成")
            self.predict_but.Enable(True)
            # wx.CallLater(wx.MessageBox("加载完成",style=wx.OK|wx.CANCEL))
        except Exception as err:
            # 如果报错无法查看
            wx.CallLater(wx.MessageBox(str(err)))
            print("err")
            
    def on_predict_but(self,event):
        #图片识别按钮
        self.result_Text.SetLabelText(" ")
        result=model.predict(self.file_picker.GetPath())
        if not result["code"] == 0:
            self.log_mess("啊哦，出错了，可能图片太大，"+result['msg'])
        else:
            msg=f"识别结果最大可能是：{result['result']}\n详情：\n"
            for i in range(0,len(result['details'])):
                msg += f"{result['class_name'][i]}: {result['details'][i]}\n"
            self.result_Text.SetLabelText(msg)
if __name__ =="__main__":
    app=wx.App()
    load_frame= Img_classificationMain_ui(None)
    load_frame.Show(True)
    app.MainLoop()